1. Итераторы. 
  Это абстракция для перебора наборов данных. 
  Они применяются для организации последовательного доступа к элементам наборов данных - массивам, объектам Set, Map, строкам и т.д.

  Любой итерируемый объект (например, массив, Map, Set и т.д.) хранит в свойстве Symbol.iterator функцию, которая возвращает связанный с объектом итератор
  Стоит отметить, что у различных типов могут быть различные дополнительные методы для получения итератора. Например, у массивов есть метод entries(), который также возвращает итератор массива

  Пример создания своего итератора смотри в соответсвующем файле.

  Разные объекты могут иметь свою собственную реализацию итератора. И при необходимости мы можем определить объект со своим итератором. 
  Применение итераторов предоставляет нам способ создать объект, который будет вести себя как коллекция элементов
  Пример создания итерируемого объекта смотри в соответсвующем файле.

2. Генераторы.
   - Это особый тип функции, которые используются для генерации значений. 
     Для определения генераторов применяется символ звездочки *, который ставится после ключевого слова function. 
     Например, определим простейший генератор
   - Для возвращения значения из генератора, как и вообще в итераторах, применяется оператор yield, после которого указывается возвращаемое значение

   Возвращение из генератора и функция return.
   Кратко - при использовании return() работа генератора прекращается!

   Также мы можем использовать for..of для получения значение генератора!
   Также можем применять:  while(!(item = numberGenerator.next()).done){
                                 console.log(item.value);
                           }
    
   В генератор можно передавать данные!
   Даже через next() можно передавть данные в генератор!

   Брат, с помощью функции throw() мы можем сгенерировать в генераторе исключение. Помни об этом!