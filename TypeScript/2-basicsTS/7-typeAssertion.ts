// представляет модель преобразования значения переменной к определенному типу.

//// ПРИМЕР:
// на веб-странице есть html-элемент с id = header, и мы хотим получить этот элемент, 
// например, чтобы изменить его текст. Для получения элемента по id мы могли бы использовать 
// встроенную js-функцию document.getElementById():

// const header = document.getElementById('header');
// header.innerText = 'Hello';

// в TypeScript эта функция возвращает объединение HTMLElement|null. То есть возвращаемое значение может представлять null, 
// если соответствующий html-элемент отсутствует на веб-странице. Вследствие этого обращение к свойству header.innerText - к 
// свойству объекта, который может быть null, содержит потенциальную ошибку. Поэтому компилятор при компиляции сгенерирует ошибку.

// ОДНАКО ситуация может быть такова, что мы точно знаем, что у нас на странице есть такой элемент. Есть разные способы для решения этой 
// проблемы, чтобы указать компилятору, что все нормально. И одним из ним является приведение типов с помощью type assertion

// Есть две формы приведения:
// 1. Использование угловых скобок
// const header = <HTMLElement>document.getElementById('header');
// header.innerText = 'Hello';

// 2. Использование оператора as, после которого указывается тип, 
// к которому надо выполнить преобразование
// const header = document.getElementById('header') as HTMLElement;
// header.innerText = 'Hello';

//// ВАЖНО! Такие преобразования будут иметь силу, если мы точно знаем, что значение может быть преобразовано к целевому типу. 
// Например, на странице есть элемент с id=header, поэтому мы можем преобразовать значение к типу HTMLElement. Однако если такого элемента нет, 
// то во время выполнения мы опять же получим ошибку.

