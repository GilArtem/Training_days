КЛАССНАЯ ШПОРА:
- https://gist.github.com/dnncomp/ad439e3128854c71fd6b8ac4bb68005c


Работа с образами:

  - docker images или docker image ls — посмотреть список образов

  - docker rmi <образ> [образ...] или docker image rm <образ> [образ...] — удалить образ(ы)


Работа с контейнерами:

  - docker run <образ> — поднять контейнер на основе образа

  - docker run --name <имя> <образ> — при поднятии присвоить имя контейнеру

  - docker run --rm <образ> — удалять контейнер после завершения его работы

  - docker run -it <образ> — позволяет «войти» в контейнер во время его создания

  - docker run -d <образ> — поднять контейнер в фоновом режиме
  
  - docker ps — список активных (работающих) контейнеров

  - docker ps -a — список всех контейнеров
  
  - docker stop <контейнер> [контейнер...] — остановить работающий(ие) контейнер(ы)

  - docker start <контейнер> [контейнер...] — запустить остановленный(ые) контейнер(ы)

  - docker rm <контейнер> [контейнер...] — удалить контейнер(ы)

  - docker exec <контейнер> команда — запустить команду в работающем контейнер

  - docker exec -it <контейнер> bash — запустить bash процесс и «войти» в контейнер


Инструкции Dockerfile'а:

  - FROM — задаем базовый образ, на основе которого собираем новый

  - COPY — копируем файл с нашей файловой системы в файловую систему контейнеров

  - ADD — добавляем файл или ссылку с нашей файловой системы в образ

  - RUN — выполняем команду

  - WORKDIR — устанавливаем рабочую директорию

  - ENTRYPOINT — задаем точку входа для запуска контейнера

  - CMD — задаем точку входа для запуска контейнера


Команда для сборки:

  - docker build <путь, где лежит Dockerfile> — создать образ на основе Dockerfile

  - docker build -t <имя_образа:тег> <путь> — создать образ с именем и тегом


Собственные образы на Docker Hub:

  - Регистрация на Docker Hub
  - Для начала заходим на сам сайт Docker Hub (https://hub.docker.com/).
  - Нажимаем кнопку Register.
  - Там нужно ввести 3 значения — Docker ID, Email и Password. (Docker ID — можно назвать логином. Он будет составлять часть названия образа (см.ниже))
  - Нажимаете галочки, затем Sign Up.
  - На почту придет уведомление. Нужно подтвердить ваш адрес.
  - Заходите на Docker Hub под созданным пользователем.
  - Создание своего репозитория
  - После того, как вы зарегистрировались, необходимо создать репозиторий (прямо как на GitHub).
  - На странице вы увидите плашку Create a Repository. Нажмите на неё.
  - После нажатия вы попадете на страницу создания репозитория. Создайте там свой репозиторий.

  Отлично! Теперь у вас есть свой репозиторий, где можно хранить свои образы.


Команды для работы с репозиторием:

  - После того, как у вас появился репозиторий, попробуйте загрузить в него свой образ.
    Чтобы это сделать, необходимо локально авторизоваться, при необходимости сменить имя и тег образа и сделать пуш на Docker Hub.
  
  - Для локальной авторизации используется команда docker login. В таком случае у вас попросит username (как раз Docker ID) и пароль.

  - Чтобы сменить название образа и тег, нужно воспользоваться командой docker tag <исходный_образ> <результирующий_образ>. В названии результирующего образа будет присутствовать ваш username, слеш (/), название репозитория.

  - Чтобы отправить образ на Docker Hub, нужно ввести команду docker push <образ> Чтобы локально разлогиниться, нужно ввести команду docker logout.

  - После того, как вы загрузили образ на Docker Hub, вы можете его скачать. Как вы уже знаете, делается это командой docker pull :)


Работа с файлами:

  - docker volume ls — вывести список вольюмов

  - docker volume create <название> — создать вольюм

  - docker volume rm <название> — удалить вольюм

  - docker volume prune — удалить вольюмы, которые не используются контейнерами

  - Bind mount: docker run -v <полный_путь_на_хосте>:<полный_путь_в_контейнере> <образ>

  - Volume: docker run -v <название_вольюма>:<полный_путь_в_контейнере> <образ>

  - Readonly режим docker run -v <полный_путь_на_хосте>:<полный_путь_в_контейнере>:ro <образ>


Переменные окружения, логи и порты:

  - Важный момент про порты
    При поднятии контейнера можно прокинуть несколько портов.

    Для этого нужно просто задать опцию -p несколько раз:

    - docker run -p <порт_на_хосте_1>:<порт_в_контейнере_1> -p <порт_на_хосте_2>:<порт_в_контейнере_2> ...

    Например, можно сделать вот так:

    - docker run -p 80:80 -p 81:80 -p 82:80 nginx

    В результате на компьютере мы свяжем порты 80, 81 и 82 с портом 80 в контейнере.

    Чаще это нужно, когда программа в контейнере способна слушать несколько портов.

    То есть что-то в духе:

    - docker run -p 80:80 -p 443:443 some_web_image

Переменные окружения:

  - ENV — инструкция в Dockerfile, которая позволяет задавать переменные окружения в контейнерах.

    * Не задавайте через эту инструкцию секретные данные
    - docker run -e <НАЗВАНИЕ_ПЕРЕМЕННОЙ>=<значение> <образ> — позволяет задать переменную окружения в конкретном контейнере.


Логи:

  - docker logs <контейнер> — позволяет вытащить логи из контейнера

  - docker logs -f <контейнер> — не отключаемся от контейнера

  - docker logs -t <контейнер> — добавляем время к логам

Порты:

  - EXPOSE — инструкция в Dockerfile, которая позволяет сообщить пользователю, какой(ие) порт(ы) слушает приложение внутри контейнера. Не прокидывает порты на хост.

  - docker run -p <порт_на_хосте>:<порт_в_контейнере> <образ> — связывает порт внутри контейнера с портом на хосте.

  - docker run -p <IP_адрес_на_хосте>:<порт_на_хосте>:<порт_в_контейнере> <образ> — по умолчанию адрес на хосте задается 0.0.0.0 (про него узнаем в следующем уроке). При поднятии можно изменить этот адрес. Например: docker run -p 127.0.0.1:80:80 nginx



Введение в сети:

  - docker network ls — список сетей

  - docker network create — создать сеть

  - docker network rm — удалить сеть

  - docker run --net=<название_сети> <образ> — подключаем контейнер к сети

  - docker inspect <название_или_ID_объекта> — получить информацию об объектах докера (контейнер, образ, вольюм, сеть)


Веб-приложение в контейнерах:

  - Многоэтапная сборка
    Этапы задаются при помощи нескольких инструкций FROM.

    Из одного этапа сборки в другой можно копировать артефакты при помощи COPY --from=.

  - FROM <образ> AS builder
  - . . .


  - FROM <образ> 
  - . . .
  - COPY --from=builder <путь_в_сборке_builder> <путь_в_текущей_сборке>
  - . . .


YAML и docker-compose:

  - docker-compose ps — список контейнеров

  - docker-compose up — поднять приложение

  - docker-compose up <сервис> — поднять конкретный контейнер

  - docker-compose up -d — поднять контейнеры в фоновом режиме

  - docker-compose  -f docker-compose.dev.yml up — указать docker-compose.yaml файл

  - docker-compose stop — остановить поднятые контейнеры

  - docker-compose start — запустить остановленные контейнеры

  - docker-compose down — остановить и удалить контейнеры и сеть



Веб-приложение в docker-compose:
Инструкции docker-compose.yaml: https://docs.docker.com/compose/compose-file/

  - build — собираем образ, на основе которого поднимем сервис

  - image — образ, на основе которого поднимем сервис

  - container_name — название контейнера в сервисе

  - volumes — список вольюмов для сервиса

  - environment — переменные окружения в сервисе

  - networks — список сетей, к которым нужно подуключить сервис

  - ports — список портов, которые нужно прокинуть у сервиса

  - restart — указываем поведение сервиса при падении

  - deploy/replicas — указываем количество контейнеров у сервиса

  - depends_on — определяем зависимость между сервисами

  - healthcheck — задаем проверку для сервиса