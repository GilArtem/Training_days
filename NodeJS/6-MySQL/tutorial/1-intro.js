import * as mysql from 'mysql2';

// Создание подключения:
const connection = mysql.createConnection({
    host: 'localhost',             // хост сервера
    port: 3306,                    // номер порта (3306 - значение по умолчанию)
    user: 'root',                  // пользователь MySQl используемый для подключения
    database: 'userdb',            // имя БД, к которой идет подключение. Необязательный параметр. Если он не указан, то подключение идет в целом к серверу
    password: 'пароль_от_сервера', // пароль для пользователя MySQL
    charset: 'UTF8_GENERAL_CI',    // кодировка для подключения, (Указано значение по умоляанию)
    timezone: 'local'              // часовой пояс сервера MySQL (Указано значение по умоляанию)
});

// Устанавливаем подключение:
// При выполнении запросов установка подключения производится неявно,
// и в таком случае выполнять его вручную необязательно
connection.connect(function(error) {
    if(error) return console.error('Ошибка: ' + error.message);
    else console.log("Подключение к серверу MySQL успешно установлено");
});

// Если в запрос надо вводить данные, которые приходят извне, то для избежания sql-инъекций рекоммендуется использовать параметризацию.
const user = ['Artem', 27];
// При параметризации вместо конкретных данных в тексте запроса ставятся плейсхолдеры 
// - знаки вопроса, вместо которых при выполнении запроса будут вставляться собственно данные.
const sqlReq = 'INSERT INTO users(name, age) VALUES(?, ?)';

// Выполнение запросов:
// Получить все данные из таблицы:
// Аналогичным образом в mesql2 можно воспользоваться методом execute() для выполнения запроса
connection.query(sqlReq,
  function(err, results, fields) {
    if(err) console.log(err);
    else console.log(results); // собственно данные
         console.log(fields); // мета-данные полей 
});


// Закрытие подключения:
connection.end(function(err) {
    if(err) return console.log("Ошибка: " + err.message);
    console.log('Подключение закрыто');
})

// Если же нам надо немедленно закрыть подключение, не дожидаясь выполнения оставшихся запросов, то в этом случае можно применить метод destroy():
//connection.destroy()