//// Факториальная сложность O(n!)
// Сложность O(n!) относится к факториальной сложности, 
// где время выполнения алгоритма растет пропорционально факториалу размера входных данных. 
// Факториал - это произведение всех положительных целых чисел от 1 до n

// Пример:
//  Перебор всех перестановок элементов массива

const array = [1, 2, 3];

function permute(arr) {
    console.time('permute');
    function swap(a, b) {
        const temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    function generate(arrLength) {
        if (arrLength === 1) {
            console.log(arr);
        } else {
            for (let i = 0; i < arrLength - 1; i++) {
                generate(arrLength - 1);
                if (arrLength % 2 === 0) {
                    swap(i, arrLength - 1);
                } else {
                    swap(0, arrLength - 1);
                }
            }
            generate(arrLength - 1);
        }
    }
    generate(arr.length);
    console.timeEnd('permute');
}

permute(array);  // [ 1, 2, 3 ]
                 // [ 2, 1, 3 ]
                 // [ 3, 1, 2 ]
                 // [ 1, 3, 2 ]
                 // [ 2, 3, 1 ]
                 // [ 3, 2, 1 ]
                 // permute: 11.826ms

// Этот код создает все возможные перестановки элементов массива путем рекурсивного генерирования всех возможных комбинаций.
// Количество операций, необходимых для генерации всех перестановок, равно факториалу длины массива. 
// Например, для массива из 3 элементов (как в примере выше) будет 3! = 3 * 2 * 1 = 6 перестановок.

// Такой алгоритм обладает очень высокой вычислительной сложностью и может стать практически неиспользуемым для больших входных данных из-за огромного числа операций, 
// которые необходимо выполнить.