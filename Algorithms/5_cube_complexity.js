//// Кубическая сложность O(n^3)
// Эта сложность означает, что время выполнения алгоритма увеличивается кубически по размеру входных данных. 
// Это часто встречается в алгоритмах, где есть три вложенных цикла или операции, каждая из которых выполняется 
// пропорционально кубу размера входных данных.

const matrixA = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
];

const matrixB = [
    [9, 8, 7],
    [6, 5, 4],
    [3, 2, 1]
];


function multiplyMatrices(matrix1, matrix2) {
    console.time('multiplyMatrices');
    let result = [];
    const m = matrix1.length;
    const n = matrix2[0].length;
    const p = matrix2.length;

    for (let i = 0; i < m; i++) {
        result[i] = [];
        for (let j = 0; j < n; j++) {
            result[i][j] = 0;
            for (let k = 0; k < p; k++) {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            }
        }
    }
    console.log(result);
    console.timeEnd('multiplyMatrices');
}

multiplyMatrices(matrixA, matrixB); // [ [ 30, 24, 18 ], [ 84, 69, 54 ], [ 138, 114, 90 ] ]
                                    // multiplyMatrices: 10.604ms


// Этот алгоритм умножения матриц имеет три вложенных цикла: первый проходится по строкам первой матрицы, 
// второй по столбцам второй матрицы, а третий - по общим элементам для умножения. Количество операций 
// равно n * n * n, где n - это размер матрицы. Это приводит к кубической сложности O(n^3). 
// Такой подход может стать неэффективным для больших матриц из-за большого количества операций.