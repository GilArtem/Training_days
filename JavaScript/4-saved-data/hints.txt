1. Cookies.
   
 Установка параметров:

 - Имя и значение куки.
   Имя не чувствительно к регистру, что означает, что, например, 
   login и Login относятся к одному и тому же файлу cookie. 
   В качестве значений разрешены только строки (а не, скажем, числа). 
   Имя и значение — единственные обязательные компоненты. 
   Указывать остальную информацию необязательно (если она не указана, используются значения по умолчанию).
   Пример:
   > document.cookie = "login=tom32;";

 - Срок окончания действия (параметр expires).
   Дата истечения срока действия, до которой файл cookie действителен. 
   По истечении указанной здесь даты срок действия файла cookie истекает, 
   файл cookie удаляется и больше не отправляется на сервер. Если при создании 
   файла cookie не указана дата истечения срока действия, он удаляется по умолчанию 
   при завершении сеанса браузера.
   Пример:	
    > document.cookie = "login=tom32;expires=Sun, 31 Dec 2023 23:59:00 GMT;";
   Для этого мы также можем использовать метод toUTCString() объекта Date:
    > const expire = new Date();
    > expire.setHours(expire.getHours() + 4);
    > document.cookie = "login=tom32;expires=" + expire.toUTCString() + ";";  // 4 часа будет жить
 
 - Путь (параметр path) и домен (параметр domain).
   Используются для разграничения куки. 
   Например, файл cookie с доменом www.localhost.com 
   отправляется только с запросами к этому домену. 
   Файл cookie с доменом www.localhost.com и путем /home 
   отправляется только с запросами на www.localhost.com/home,
   но не на www.localhost.com/about.
   Пример:
    > document.cookie = "login=tom32;expires=Sun, 31 Dec 2023 23:59:00 GMT;path=/home;";
   Или так:
    > document.cookie = "login=tom32;expires=Sun, 31 Dec 2023 23:59:00 GMT;path=/;domain=blog.mysite.com;";
   Параметр path=/ указывает, что куки будут доступны для всех директорий и путей поддомена blog.mysite.com.

 - Параметр secure.
   Флаг безопасности, который можно использовать, чтобы дополнительно указать, 
   следует ли отправлять файлы cookie только при соединениях, использующих протокол 
   Secure Sockets Layer (SSL), например, чтобы разрешить отправку по https. 
   Если этот параметр установлен, куки могут быть посланы 
   по адресу https://www.localhost.com, а при запросах по адресу посланы 
   по адресу http://www.localhost.com такие куки НЕ посылаются.
   Пример:
    > document.cookie = "login=tom32;expires=Sun, 31 Dec 2023 23:59:00 GMT;path=/;secure=true;";

 Ограничения куки.
  Все файлы cookie для соответствующего домена и соответствующего пути отправляются с каждым запросом, 
  что влияет на объем пересылаемых данных. Кроме того, файлы cookie, отправляемые по протоколу HTTP 
  (а не по безопасному протоколу HTTPS), передаются в незашифрованном виде, что представляет угрозу безопасности 
  в зависимости от типа передаваемой информации. Еще одним ограничением файлов cookie является разрешенный размер памяти в 4 КБ.


2. Web Storage.

 Для хранения данных в HTML5 применяется специальный API - Web Storage API, который обеспечивает доступ к внутреннему хранилищу браузера (web storage). 
 Данное хранилище состоит из двух компонентов: session storage и local storage. 
 
 Session storage - представляет временное хранилище информации, которая удаляется после закрытия вкладки браузера.

 Local storage - представляет хранилище для данных на постоянной основе. 
 Данные из local storage автоматически не удаляются и не имеют срока действия. 
 Эти данные не передаются на сервер в запросе HTTP. Кроме того, объем local storage составляет в Chrome и Firefox 5 Mб для домена.

 Все данные в web storage представляют набор пар ключ-значение. То есть каждый объект имеет уникальное имя-ключ и определенное значение.

 Для работы с local storage в javascript используется объект localStorage, а для работы с session storage - объект sessionStorage. 
 Оба этих объектов с точки зрения API похожи и предоставляют аналогичные свойства и методы:

 - length: содержит количество элементов в хранилище

 - clear(): удаляет все элементы из хранилища

 - getItem(key): возвращает определенный элемент, который имеет ключ key

 - key(index): возвращает ключ элемента, который имеет индекс index

 - removeItem(key): удаляет элемент с ключом key

 - setItem(key, value): устанавливает для элемента с ключом key значение value. Если элемент с ключом key уже есть в хранилище, то его значение перезаписывается. Если элемента нет, то он добавляется.