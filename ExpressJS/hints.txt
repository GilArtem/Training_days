1. Подгружаем все необходимые библиотеки (express, @types/express (-D), nodemon (-D), colors, ejs, );

2. Устанавливаем ("type": "module",) в package.json для того, чтобы noda понимала, что мы будем работать с импортами и экспортами;

3. Указать порт при запуске сервера через теминал можно так: export PORT=4200 && node index.js;

4. Для открытия html страницы в новой вкладке исопользовать:  <a href="/" target="_blank"></a> (target="_blank");

5. Какие есть дополнительные методы у res?

6. Работаем с шаблонизатором EJS (бывают handlebars ...). Шаблонизаторы - библиотеки, позволяющие генерировать динамический html;
    
    - app.set('view engine', 'ejs'): Этот метод устанавливает шаблонизатор EJS для вашего приложения Express. 
      EJS (Embedded JavaScript) является шаблонизатором, который позволяет встраивать JavaScript код прямо в HTML шаблоны для динамической генерации контента на сервере.

    - app.set('views', path.resolve(__dirname, 'ejs')): Этот метод устанавливает директорию, где Express будет искать шаблоны для рендеринга. 
      В данном случае, path.resolve(__dirname, 'ejs') используется для определения абсолютного пути к директории ejs, которая, вероятно, содержит ваши EJS шаблоны.

    По сути, эти два метода сообщают Express, что вы хотите использовать шаблонизатор EJS для вашего приложения и где расположены ваши шаблоны. 
    Когда вы будете рендерить страницы с помощью метода res.render(), Express будет автоматически искать шаблоны в указанной директории и использовать EJS для их рендеринга.

7. Немного украшаем наше приложенеи через bootstrap:
  
  - Меняем стилистику шрифта: (.com -> Docs -> Download -> CDN via jsDelivr), копируем строчку css и вставляем ее в секцию head нашего файла.ejs;  

  - Красивая навигация: (Components -> Navbar -> );

  ЗАМЕТКА: дабы избежать дублирования кода, создаем новую папку partials и засовываем туда стилистический файл (navbar.ejs);

8. head засунули в папку partials;

9. Дорабатываем юзер-интерфейс сайта(делаем подсветку той вкладки сайта, на которй мы находимся):

  -  <a class="nav-link  <% if (active === 'features') { %>active<% }%>"" href="/features">Features</a> (Пример active);

10. Реализация клиент-серверного приложения при реализации vue.js;

11. Создаем папку routes в корне проекта, создаем файл servers.js и переносим туда логику запросов из index.js (декомпозиция мать ее)

12. Продолжаем структурировать приложение на express (создаем папку controllers)

С серверной частью вроде все, тепрь немного фронта:  

13. Подключаем vue.js (.com -> Docs -> Installation -> CDN). Там будет <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>, который мы добавим в features.ejs

14. В bootstrap находим спиннер для отображения загрузки (в поисковике вводим spinners) и добавляем его в features => div id = 'app'

15. Для асинхронной загрузки серверов используется метод mounted()

16. Функции позволяющие работать с REST api

17. Функционал удаления элементов из созданного списка 