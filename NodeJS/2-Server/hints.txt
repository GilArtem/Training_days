Курс: https://metanit.com/web/nodejs/1.2.php

ЗАМЕТКИ:

### CЕРВЕР

1. Параметр request позволяет получить информацию о запросе и представляет объект http.IncomingMessage. 
  Отметим некоторые основные свойства этого объекта:
   - headers: возвращает заголовки запроса
   - method: тип запроса (GET, POST, DELETE, PUT)
   - url: представляет запрошенный адрес

2. Параметр response управляет отправкой ответа и представляет объект http.ServerResponse. 
  Среди его функциональности можно выделить следующие методы:
   - statusCode: устанавливает статусный код ответа
   - statusMessage: устанавливает сообщение, отправляемое вместе со статусным кодом
   - setHeader(name, value): добавляет в ответ один заголовок
   - write: пишет в поток ответа некоторое содержимое
   - writeHead: добавляет в ответ статусный код и набор заголовков
   - end: сигнализирует серверу, что заголовки и тело ответа установлены, в итоге ответ отсылается клиенту. 
          Данный метод должен вызываться в каждом запросе.

3. Маршрутизация. По умолчанию Node.js не имеет встроенной системы маршрутизации. Обычно она реализуется с помощью специальных фреймворков типа Express
   Однако если необходимо разграничить простейшую обработку пары-тройки маршрутов, то вполне можно использовать для этого свойство url объекта Request. 

4. Переадресация. Предполагает отправку статусного кода 301 (постоянная переадресация) или 302 (временная переадресация) и заголовка Location, который указывает на новый адрес. 

5. Отправка файлов. Можно сделать 2 способами:
  1) fs.createReadStream() - считываем файл в поток
     pipe() - связываем считанные файлы с потоком записи (с response)

  2) fs.readFile() - чтение данных
     res.end() - отправка данных

  Второй вариант выглядет предпочтительнее на мой вкус (см. 02 -> secondApp.js)

6. Получение данных от клиента. 
   Все данные запроса передаются через объект request - первый параметр функции обратного вызова Функция, 
   которая передается в функцию http.createServer(). Однако получить из него отправленные клиентом данные может представлять сложность. 
   Прежде всего потому, что функция обратного вызова в http.createServer() вызывается при получении всех HTTP-заголовков, но не тела запроса.
   Кроме того, сам объект request представляет поток, который получает данные отдельными чанками. 
   Соответственно для получения данных из запроса нам необходимо прослушивать этот поток и последовательно извлекать их него полученные чанки информации.

   Тут в игру вступает новое понятие Buffer. Вот хорошая саться по этому поводу (https://habr.com/ru/companies/ruvds/articles/348970/)

7. Templates(шаблоны). Предназначены для редактирования html-страницы, через файл приложения .js
  Мы также можем применять специальные инструменты - шаблоны, вместо которых в файл будет вставляться какой-то определенный текст. 
  