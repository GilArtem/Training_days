//// Экспоненциальная сложность O(2^n)
// Сложность O(2^n) относится к экспоненциальной сложности, где время выполнения алгоритма увеличивается экспоненциально по мере увеличения размера входных данных. 
// Это часто встречается в алгоритмах, которые решают проблемы методом "разделяй и властвуй" или используют рекурсию без оптимизации.

// Пример: рекурсивное вычисление чисел Фибоначчи

function fibonacci(n) {
    if (n <= 1) {
        return n;
    } else {
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}

console.time('fibonacci(5)')
console.log(fibonacci(5));         // 5       8.938ms
console.timeEnd('fibonacci(5)')

console.time('fibonacci(10)')
console.log(fibonacci(10));       // 55       0.078ms
console.timeEnd('fibonacci(10)')

console.time('fibonacci(20)')
console.log(fibonacci(20));       // 6765     0.786ms
console.timeEnd('fibonacci(20)')

// Этот код использует рекурсию для вычисления чисел Фибоначчи. 
// Однако каждый раз, когда вызывается функция fibonacci, она порождает два дополнительных вызова, 
// что приводит к экспоненциальному увеличению количества вызовов функций с увеличением n.

// Для больших значений n такой подход становится очень неэффективным из-за огромного числа повторных вычислений. 
// Экспоненциальная сложность обычно не является оптимальным решением из-за своей высокой вычислительной нагрузки 
// при увеличении размера входных данных.