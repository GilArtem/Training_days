Классы - https://metanit.com/web/javascript/4.12.php

1. В JavaScript объекты по прежнему создаются не на основе классов, а на основе объектов или прототипов.

2. Вызов конструктора по умолчанию (new), который есть в классах, фактически представляет вызов метода, 
  который имеет то же название, что и класс, и возвращает объект этого класса. Но также мы можем определить в классах свои конструкторы
  А вообще цель конструктора - инициализация объекта некоторыми начальными данными. 

3. Как и функция-конструктор, класс имеет прототип, который можно получить стандартными способами:
  - class.prototype;
  - exemplare_classa.__proto__;
  - Object.getPrototypeOf(exemplare_classa);
  - exemplare_classa.constructor;

4. Приватные поля и методы (предваряется символом #). 
  Установить и получить значение полей можно только внури класса. Вне его они не доступны. 
  Поэтому при попытке обратиться к ним через имя объекта, мы получим ошибку.
  
  Как правило, приватные методы используются для выполнения каких-то вспомогательных действий, как, например, 
  валидация, и которые нет смысла делать доступнми из вне.

5. Статические поля и методы (static).
  Статические методы, как и статические поля, определяются для всего класса в целом, а не для отдельного объекта. 

6. Приватные статические поля и методы
  Как и обычные поля и методы, статические поля и методы могут быть приватными. 
  Такие поля и методы доступны только из других статических методов класса:

7. Свойства и методы доступа (get & set).
  Оба метода - get и set имеют одинаковые названия (например, age). Как правило, они опосредуют доступ к некоторому приватному полю. Метод set предназначен для установки. 
  Он принимает в качестве параметра новое значение. Далее в методе set мы можем выполнить ряд действий при установке.
  Метод get предназначен для получения значения. Здесь мы можем определить какую-нибудь логику при возвращении значения.

  Свойства, доступные только для чтения.
  Мы можем использовать только один из них. Например, мы можем оставить только метод get и тем самым сделать свойство доступным только для чтения.

  Свойства только для установки.
  Также мы можем сделать свойство доступным только для записи, оставив только метод set. Например, добавим новое свойство id, которое будет доступно только для записи.

  Свойства без обращения к полям.
  Стоит отметить, что методы get и set необязательно должны обращаться к приватным или неприватным полям. Это могут быть и вычисляемые свойства.

8. Наследование. 
  При наследовании класса с конструктором, вместе со всем функционалом производный класс наследует и конструктор базового класса.
  Производный класс также может определить свой конструктор. 
  Если производный класс определяет конструктор, то в нем должен быть вызван конструктор базового класса. 
  Для обращения производном классе к функциональности базового класса, в том числе для обращения к конструктору базового класса, применяется ключевое слово super().

  Наследование и приватные поля. 
  При наследовании стоит учитывать, что производный класс может обращаться к любой функциональности базового класса, кроме приватных полей и методов. 

  С помощью `экземпляр_класса instanceof Класс` можно определить пренадлежность екземпляра к конкретному классу.