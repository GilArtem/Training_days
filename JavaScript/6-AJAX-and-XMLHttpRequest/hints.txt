1. Для взаимодействия кода javascript с сервером обычно применяется такая технология как Ajax. 
   Ajax представляет технологию для отправки запросов к серверу из клиентского кода JavaScript 
   без перезагрузки страницы. Сам термин расшифровывается как Asynchronous JavaScript And XML. 
   То есть изначально AJAX предполагал асинхронное взаимодействие клиента и сервера посредством данных 
   в формате XML. Хотя сейчас XML во многом вытеснил формат JSON.

   Одним из способов для отправки ajax-запросов является применение объекта XMLHttpRequest.

   const xhr = new XMLHttpRequest();




!! МЕТОДЫ. 

Для отправки и настройки ajax-запросов с помощью объекта XMLHttpRequest
   существует ряд методов:

   - abort(): прерывает запрос;
   - getAllResponseHeaders(): возвращает все заголовки HTTP-ответа в виде строки;
   - getResponseHeader(header): возвращает значение заголовка header;
   - open(method, url[, async[, user[, password]]]):
     § method: тип запроса ("GET", "POST", "PUT", "DELETE" и т.д.);
     § url: адрес ресурса, к которому отправляется запрос;
     § async:  Если значение true (значение по умолчанию), то запрос асинхронный;
     § user: имя пользователя, которое применяется при его аутентификации на сервере 
             (то есть для определения, какой именно пользователь осуществил запрос), 
             по умолчанию равно null;
     § password:  пароль пользователя, который применяется при его аутентификации на сервере, 
                 по умолчанию равно null;
   
   - overrideMimeType(mime): переопределяет MIME-тип, возвращаемый сервером;
   - send(data): отправка запроса: 
     § data: необязательный параметр, с помощью которого можно передать данные серверу.
             по умолчанию его значение равно null;
   - setRequestHeader(header, value): устанавливает значение value для заголовка header, 
                                      который будет отправляться в запросе



!! СВОЙСТВА.

Позволяющие настроить отправку запроса и извлечь полученные данные от сервера:

   - response:  возвращает ответ сервера. Ответ может представлять объекты ArrayBuffer, Blob, Document, объект JSON, 
                строку или null (если запрос еще не завершен или завершился неудачно);
   - responseType: возвращает тип ответа. Есть следующие типы:
      § "": пустая строка;
      § "arraybuffer": объект ArrayBuffer, которые содержит бинарные данные;
      § "blob": объект Blob, которые содержит бинарные данные;
      § "document": объект Document (документ HTML/XML);
      § "json": данные в формате json;
      § "text": текст;
   
   - responseText: возвращает ответа сервера в виде строки 
                   или значения null (если запрос еще не завершен или завершился неудачно);
   - responseXML:  возвращает объект Document (документ HTML/XML), если ответ от сервера в формате XML/HTML;
   - readyState:   хранит состояния запроса, которое представляет число:
      § 0: объект XMLHttpRequest создан, но метод open() еще не был вызван для инициализации объекта;
      § 1: метод open() был вызван, но запрос еще не был отправлен методом send();
      § 2: запрос был отправлен, заголовки и статус ответа получены и готовы к использованию;
      § 3: ответ получен от сервера;
      § 4: выполнение запроса полностью завершено (даже если получен код ошибки, например, 404);

   - status: содержит статусный код ответа HTTP, который пришел от сервера. 
             С помощью статусного кода можно судить об успешности запроса или об ошибках, 
             которые могли бы возникнуть при его выполнении. Например:
             > код 200 - указывает на то, что запрос прошел успешно;
             > код 403 - говорит о необходимости авторизации для выполнения запроса;
             > код 404 - сообщает, что ресурс не найден и т.д.
    
   - statusText: возвращает текст статуса ответа, например, "200 OK"
   - timeout: устанавливает тайм-аут - время в миллисекундах, во время которого может выполняться запрос. 
              Если это время истекло, а запрос еще не завершен, то запрос прерывается;
   - withCredentials: определить, следует ли включать в запрос учетные данные, например, файлы cookie;



!! СОБЫТИЯ И ОБРАБОТЧИКИ СОБЫТИЙ. 

- Для отслеживания состояния запроса:

   - abort: срабатывает после прерывания запроса. 
            Для установки обработчика применяется свойство - onabort;
   - progress: срабатывает при выполнения запроса. 
               Для установки обработчика применяется свойство onprogress;
   - load: срабатывает после выполнения запроса. 
           Для установки обработчика применяется свойство onload;
   - loadend:  срабатывает после успешного выполнения запроса. 
               Для установки обработчика применяется свойство onloadend;
   - error: срабатывает при возникновении ошибки. 
            Для установки обработчика применяется свойство onerror;
   - loadstart:  срабатывает после запуска запроса. 
                 Для установки обработчика применяется свойство onloadstart;
   - timeout:  срабатывает, если запрос прерывается из-за тайм-аута. 
               Для установки обработчика применяется свойство onimeout;
   - readystatechange: возникает каждый раз, когда изменяется значение свойства readyState. 
                       Для установки обработчика применяется свойство onreadystatechange;


- Для установки обработчиков событий можно использовать одно из следующих свойств XMLHttpRequest:

   - onabort: вызывается, когда запрос был прерван с помощью метода abort().
   - onerror: вызывается при возникновении ошибки;
   - onload: вызывается, когда запрос успешно выполнен и доступен ответ;
   - onloadend: вызывается после успешного выполнения запроса;
   - onloadstart: вызывается после запуска запроса;
   - onprogress: вызывается при выполнении запроса;
   - onreadystatechange: вызывается при изменении состояния запроса;
   - ontimeout: вызывается, если запрос прерывается из-за тайм-аута;
   - upload: можно использовать для отслеживания статуса при загрузке данных.




2.  Для получения json с помощью XMLHttpRequest следует выполнить две настройки:

   1)  xhr.responseType = "json";
   2)  xhr.setRequestHeader("Accept", "application/json");


3. Как видно из примеров прошлых тем для создания ajax-запросов используются фактически повторяющиеся вызовы, которые отличаются лишь деталями - строкой запроса, функциями обработки ответа. 
   Хорошим решением было бы создать для всех действий, связанных с асинхронным ajax-запросом, какую-то общую абстракцию и затем использовать ее при следующих обращениях к серверу.
   
   Для создания дополнительного уровня абстракции в данном случае удобно применять объект Promise, который обертывает асинхронную операцию в один объект, который позволяет определить действия, 
   выполняющиеся при успешном или неудачном выполнении этой операции.